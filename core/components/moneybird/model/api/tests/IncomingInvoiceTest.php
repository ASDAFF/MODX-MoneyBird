<?php

namespace Moneybird;

require_once dirname(__FILE__) . '/../ApiConnector.php';

/**
 * Test class for IncomingInvoice.
 * Generated by PHPUnit on 2012-07-15 at 12:56:35.
 */
class IncomingInvoiceTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var IncomingInvoice
	 */
	protected $object;
	
	/**
	 * @var int
	 */
	protected static $invoiceId;
	
	/**
	 * @var string
	 */
	protected static $invoiceNumber;
	
	protected static $config;
	
	protected static $contact;
	
	protected static $taxRateId;
	
	/**
	 * @var Contact_Service
	 */
	protected $service;
	
	/**
	 * @var ApiConnector
	 */
	protected $apiConnector;
	
	public static function setUpBeforeClass() {
		include ('config.php');
		
        self::$invoiceNumber = null;
		self::$invoiceId = null;
		
		self::$config = $config;
		$transport = getTransport($config);
		$mapper = new XmlMapper();
		$connector = new ApiConnector($config['clientname'], $transport, $mapper);
		self::$contact = $connector->getService('Contact')->getById($config['testcontact']);
		
		$rates = $connector->getService('TaxRate')->getAll('purchase');
		self::$taxRateId = current($rates)->id;
    }

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		include ('config.php');
		
		$transport = getTransport($config);
		$mapper = new XmlMapper();
		$this->apiConnector = new ApiConnector($config['clientname'], $transport, $mapper);
		$this->service = $this->apiConnector->getService('IncomingInvoice');
		if (!is_null(self::$invoiceId)) {
			$this->object = $this->service->getById(self::$invoiceId);
		}
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}
	
	/**
	 * @covers Moneybird\IncomingInvoice::setContact
	 */
	public function testSetContact() {
		$this->assertInstanceOf('Moneybird\Contact', self::$contact);
		
		$invoice = new IncomingInvoice(array(), self::$contact);
		$this->assertEquals(self::$contact->id, $invoice->contactId);
				
		$invoice = new IncomingInvoice();
		$invoice->setContact(self::$contact);
		$this->assertEquals(self::$contact->id, $invoice->contactId);
	}
	
	/**
	 * @covers Moneybird\IncomingInvoice::save
	 */
	public function testSave() {
		$details = new IncomingInvoice_Detail_Array();
		$details->append(new IncomingInvoice_Detail(array(
			'amount' => 5, 
			'description' => 'My invoice line',
			'price' => 20,
			'taxRateId' => self::$taxRateId,
		)));
		$details->append(new IncomingInvoice_Detail(array(
			'amount' => 1, 
			'description' => 'My second invoice line',
			'price' => 12,
			'taxRateId' => self::$taxRateId,
		)));
		
		$invoice = new IncomingInvoice(array(
			'invoiceId' => '2012-'.time(),
			'invoiceDate' => new \DateTime(),
			'details' => $details,
			'currency' => 'EUR',
		), self::$contact);
		
		$invoice->save($this->service);
		$this->assertInstanceOf('Moneybird\IncomingInvoice', $invoice);
		self::$invoiceId = $invoice->id;
		$this->assertNotNull(self::$invoiceId);
		$this->assertGreaterThan(0, self::$invoiceId);
		
		$invoice->details[0]->setDeleted();
		$invoice->save($this->service);
		$this->assertEquals(1, count($invoice->details));
	}
	
	/**
	 * @covers Moneybird\IncomingInvoice_Service::getById
	 */
	public function testGetById() {
		$invoice = $this->service->getById(self::$invoiceId);
		$this->assertInstanceOf('Moneybird\IncomingInvoice', $invoice);
		$this->assertEquals(self::$invoiceId, $invoice->id);
	}

	/**
	 * @covers Moneybird\IncomingInvoice_Service::getAll
	 */
	public function testGetAll() {
		$invoices = $this->service->getAll();
		$this->assertInstanceOf('Moneybird\IncomingInvoice_Array', $invoices);
		$this->assertGreaterThan(0, count($invoices), 'No invoices found');
		
		$invoices = self::$contact->getIncomingInvoices($this->service);
		$this->assertGreaterThan(0, count($invoices), 'No invoices found');
		foreach ($invoices as $invoice) {
			$this->assertEquals(self::$contact->id, $invoice->contactId);
		}
	}
	
	/**
	 * @covers Moneybird\IncomingInvoice::registerPayment
	 */
	public function testRegisterPayment() {		
		$amount = 10.12;
		$payment = new IncomingInvoice_Payment(array(
			'paymentDate' => new \DateTime(),
			'paymentMethod' => 'bank_transfer',
			'price' => $amount,
			'sendEmail' => false,
		));
		$this->object->registerPayment(
			$this->service,
			$payment
		);
		$this->assertEquals($amount, $this->object->totalPaid);		
	}
	
	/**
	 * @covers Moneybird\IncomingInvoice::delete
	 */
	public function testDelete() {
		$this->object->delete($this->service);
		$this->setExpectedException('Moneybird\NotFoundException');
		$this->service->getById(self::$invoiceId);
	}
	 /* 
	 */

}

?>
