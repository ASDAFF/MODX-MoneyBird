<?php

namespace Moneybird;

require_once dirname(__FILE__) . '/../ApiConnector.php';

/**
 * Test class for Invoice.
 * Generated by PHPUnit on 2012-07-15 at 12:56:35.
 */
class InvoiceTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var Invoice
	 */
	protected $object;
	
	/**
	 * @var int
	 */
	protected static $invoiceId;
	
	/**
	 * @var string
	 */
	protected static $invoiceNumber;
	
	protected static $config;
	
	protected static $contact;
	
	protected static $taxRateId;
	
	/**
	 * @var Contact_Service
	 */
	protected $service;
	
	/**
	 * @var ApiConnector
	 */
	protected $apiConnector;
	
	public static function setUpBeforeClass() {
		include ('config.php');
		
        self::$invoiceNumber = null;
		self::$invoiceId = null;
		
		self::$config = $config;
		$transport = getTransport($config);	
		$mapper = new XmlMapper();
		$connector = new ApiConnector($config['clientname'], $transport, $mapper);
		self::$contact = $connector->getService('Contact')->getById($config['testcontact']);
		
		$rates = $connector->getService('TaxRate')->getAll('sales');
		self::$taxRateId = current($rates)->id;
    }

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		include ('config.php');
		
		$transport = getTransport($config);	
		$mapper = new XmlMapper();
		$this->apiConnector = new ApiConnector($config['clientname'], $transport, $mapper);
		$this->service = $this->apiConnector->getService('Invoice');
		if (!is_null(self::$invoiceId)) {
			$this->object = $this->service->getById(self::$invoiceId);
		}
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}
	
	/**
	 * @covers Moneybird\Invoice::setContact
	 */
	public function testSetContact() {
		$this->assertInstanceOf('Moneybird\Contact', self::$contact);
		
		$invoice = new Invoice(array(), self::$contact);
		$this->assertEquals(self::$contact->address1, $invoice->address1);
				
		$invoice = new Invoice();
		$invoice->setContact(self::$contact);
		$this->assertEquals(self::$contact->address1, $invoice->address1);
	}
	
	/**
	 * @covers Moneybird\Invoice::save
	 */
	public function testSave() {
		$details = new Invoice_Detail_Array();
		$details->append(new Invoice_Detail(array(
			'amount' => 5, 
			'description' => 'My invoice line',
			'price' => 20,
			'taxRateId' => self::$taxRateId,
		)));
		$details->append(new Invoice_Detail(array(
			'amount' => 1, 
			'description' => 'My second invoice line',
			'price' => 12,
			'taxRateId' => self::$taxRateId,
		)));
		
		$invoice = new Invoice(array(
			'poNumber' => 'PO Number',
			'details' => $details,
			'lastname' => 'Custom lastname', 
		), self::$contact);
		
		$invoice->save($this->service);
		$this->assertInstanceOf('Moneybird\Invoice', $invoice);
		self::$invoiceId = $invoice->id;
		$this->assertNotNull(self::$invoiceId);
		$this->assertGreaterThan(0, self::$invoiceId);
		
		$invoice->details[0]->setDeleted();
		$invoice->save($this->service);
		$this->assertEquals(1, count($invoice->details));
	}
	
	/**
	 * @covers Moneybird\Invoice_Service::getById
	 */
	public function testGetById() {
		$invoice = $this->service->getById(self::$invoiceId);
		$this->assertInstanceOf('Moneybird\Invoice', $invoice);
		$this->assertEquals(self::$invoiceId, $invoice->id);
	}

	/**
	 * @covers Moneybird\Invoice_Service::getSyncList
	 */
	public function testGetSyncList() {
		$revision = $this->object->revision;
		$this->assertNotNull($revision, 'Invoice '.self::$invoiceId.' not in synclist');
		$this->object->setData(array(
			'firstname' => 'Test'.time()
		));
		$this->object->save($this->service);
		sleep(1);
		
		$newRevision = null;
		$syncList = $this->service->getSyncList();
		$this->assertInstanceOf('Moneybird\Invoice_Array', $syncList);
		foreach ($syncList as $sync) {
			if ($sync->id == self::$invoiceId) {
				$newRevision = $sync->revision;
			}
		}
		$this->assertNotNull($newRevision, 'Invoice '.self::$invoiceId.' not in synclist');
		$this->assertGreaterThan($revision, $newRevision);
	}

	/**
	 * @covers Moneybird\Invoice_Service::getByIds
	 */
	public function testGetByIds() {
		$invoices = $this->service->getByIds(array(self::$invoiceId));
		$this->assertInstanceOf('Moneybird\Invoice_Array', $invoices);
		$this->assertCount(1, $invoices);
	}

	/**
	 * @covers Moneybird\Invoice_Service::getAll
	 */
	public function testGetAll() {
		$invoices = $this->service->getAll('draft');
		$this->assertInstanceOf('Moneybird\Invoice_Array', $invoices);
		$this->assertGreaterThan(0, count($invoices), 'No invoices found');
		
		$invoices = self::$contact->getInvoices($this->service);
		$this->assertGreaterThan(0, count($invoices), 'No invoices found');
		foreach ($invoices as $invoice) {
			$this->assertEquals(self::$contact->id, $invoice->contactId);
		}
	}
	
	/**
	 * @covers Moneybird\Invoice_Service::getByPushMessage
	 */
	public function testGetByPushMessage() {
		$_POST['invoice_id'] = self::$invoiceId;
		$_POST['state'] = 'paid';
		$invoice = $this->service->getByPushMessage();
		$this->assertInstanceOf('Moneybird\Invoice', $invoice);
		$this->assertEquals($this->object, $invoice);
	}
	

	/**
	 * @covers Moneybird\Invoice::getPdf
	 */
	public function testGetPdf() {
		$this->setExpectedException('Moneybird\InvalidStateException');
		$this->object->getPdf($this->service);
	}
	
	/**
	 * @covers Moneybird\Invoice::markAsSent
	 */
	public function testMarkAsSent() {
		$this->object->markAsSent($this->service);
		self::$invoiceNumber = $this->object->invoiceId;
		$this->assertNotNull(self::$invoiceNumber);
	}

	/**
	 * @covers Moneybird\Invoice::send
	 *
	public function testSend() {
		$this->object->send($this->service, 'email', 'sjors@desjors.nl');
	}	
	
	/**
	 * @covers Moneybird\Invoice_Service::getByInvoiceId
	 */
	public function testGetByInvoiceId() {
		$invoice = $this->service->getByInvoiceId(self::$invoiceNumber);
		$this->assertInstanceOf('Moneybird\Invoice', $invoice);
		$this->assertEquals($invoice->id, self::$invoiceId);
	}

	/**
	 * @covers Moneybird\Invoice::remind
	 */
	public function testRemind() {
		$numLines = count($this->object->history);
		$this->object->remind($this->service, 'hand');
		$this->assertGreaterThan($numLines, count($this->object->history));
	}

	/**
	 * @covers Moneybird\Invoice::registerPayment
	 */
	public function testRegisterPayment() {		
		$amount = 10.12;
		$payment = new Invoice_Payment(array(
			'paymentDate' => new \DateTime(),
			'paymentMethod' => 'bank_transfer',
			'price' => $amount,
			'sendEmail' => false,
		));
		$this->object->registerPayment(
			$this->service,
			$payment
		);
		$this->assertEquals($amount, $this->object->totalPaid);		
	}
	
	/**
	 * @covers Moneybird\Invoice::delete
	 */
	public function testDelete() {
		$this->object->delete($this->service);
		$this->setExpectedException('Moneybird\NotFoundException');
		$this->service->getById(self::$invoiceId);
	}
	 /* 
	 */

}

?>
