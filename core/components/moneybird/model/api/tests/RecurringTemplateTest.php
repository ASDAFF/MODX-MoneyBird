<?php

namespace Moneybird;

require_once dirname(__FILE__) . '/../ApiConnector.php';

/**
 * Test class for RecurringTemplate.
 * Generated by PHPUnit on 2012-07-15 at 12:56:35.
 */
class RecurringTemplateTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var RecurringTemplate
	 */
	protected $object;
	
	/**
	 * @var int
	 */
	protected static $templateId;
	
	protected static $config;
	
	protected static $contact;
	
	protected static $taxRateId;
	
	/**
	 * @var Contact_Service
	 */
	protected $service;
	
	/**
	 * @var ApiConnector
	 */
	protected $apiConnector;
	
	public static function setUpBeforeClass() {
		include ('config.php');
		
		self::$templateId = null;
		
		self::$config = $config;
		$transport = getTransport($config);
		$mapper = new XmlMapper();
		$connector = new ApiConnector($config['clientname'], $transport, $mapper);
		self::$contact = $connector->getService('Contact')->getById($config['testcontact']);
		
		$rates = $connector->getService('TaxRate')->getAll('sales');
		self::$taxRateId = current($rates)->id;
    }

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		include ('config.php');
		
		$transport = getTransport($config);
		$mapper = new XmlMapper();
		$this->apiConnector = new ApiConnector($config['clientname'], $transport, $mapper);
		$this->service = $this->apiConnector->getService('RecurringTemplate');
		if (!is_null(self::$templateId)) {
			$this->object = $this->service->getById(self::$templateId);
		}
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}
	
	/**
	 * @covers Moneybird\RecurringTemplate::setContact
	 */
	public function testSetContact() {
		$this->assertInstanceOf('Moneybird\Contact', self::$contact);
		
		$template = new RecurringTemplate(array(), self::$contact);
		$this->assertEquals(self::$contact->id, $template->contactId);
				
		$template = new RecurringTemplate();
		$template->setContact(self::$contact);
		$this->assertEquals(self::$contact->id, $template->contactId);
	}
	
	/**
	 * @covers Moneybird\RecurringTemplate::save
	 */
	public function testSave() {
		$details = new RecurringTemplate_Detail_Array();
		$details->append(new RecurringTemplate_Detail(array(
			'amount' => 5, 
			'description' => 'My template line',
			'price' => 20,
			'taxRateId' => self::$taxRateId,
		)));
		$details->append(new RecurringTemplate_Detail(array(
			'amount' => 1, 
			'description' => 'My second template line',
			'price' => 12,
			'taxRateId' => self::$taxRateId,
		)));
		
		$template = new RecurringTemplate(array(
			'poNumber' => 'PO Number',
			'details' => $details,
			'frequencyType' => RecurringTemplate::FREQUENCY_YEAR,
		), self::$contact);
		
		$template->save($this->service);
		$this->assertInstanceOf('Moneybird\RecurringTemplate', $template);
		self::$templateId = $template->id;
		$this->assertNotNull(self::$templateId);
		$this->assertGreaterThan(0, self::$templateId);
		
		$template->details[0]->setDeleted();
		$template->save($this->service);
		$this->assertEquals(1, count($template->details));
	}
	
	/**
	 * @covers Moneybird\RecurringTemplate_Service::getById
	 */
	public function testGetById() {
		$template = $this->service->getById(self::$templateId);
		$this->assertInstanceOf('Moneybird\RecurringTemplate', $template);
		$this->assertEquals(self::$templateId, $template->id);
	}

	/**
	 * @covers Moneybird\RecurringTemplate_Service::getAll
	 */
	public function testGetAll() {
		$templates = $this->service->getAll();
		$this->assertInstanceOf('Moneybird\RecurringTemplate_Array', $templates);
		$this->assertGreaterThan(0, count($templates), 'No templates found');
		
		$templates = self::$contact->getRecurringTemplates($this->service);
		$this->assertGreaterThan(0, count($templates), 'No templates found');
		foreach ($templates as $template) {
			$this->assertEquals(self::$contact->id, $template->contactId);
		}
	}

	/**
	 * @covers Moneybird\RecurringTemplate::delete
	 */
	public function testDelete() {
		$this->object->delete($this->service);
		$this->setExpectedException('Moneybird\NotFoundException');
		$this->service->getById(self::$templateId);
	}
	 /* 
	 */

}

?>
